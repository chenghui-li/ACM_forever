
题目大意：给两个列表，每个列表节点数字非负，将两个列表从左向右对应位相加（可进位）结果存放于一个列表中输出
思路：按照小学加法运算的想法，也类似于高精度运算的想法，按位相加，进位保存即可，难点在于对列表的操作。ce了好多次，还是要多敲代码呀
设计知识：列表的操作
源代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *index = new ListNode(0);      //存放结果列表的起始地址，初始建立一个节点，初值为0
        ListNode *ptr = index;    //用于操作的列表指针
        int val1 =  0;    //第一个列表的每个元素的值
        int val2 = 0;    //第二个列表的每个元素的值
        int flag = 0;    //进位
        //最长的列表长度决定循环次数
        while((l1 != NULL || l2 != NULL)){
            val1 = 0;    
            val2 = 0;
            
            if(l1 != NULL){
                val1 = l1->val;
                l1 = l1->next;
            }
            if(l2 != NULL){
                val2 = l2->val;
                l2 = l2->next;
            }
            
            int ans = val1 + val2 + flag;
            //flag = 0;
            flag = ans/10;
            ans %=10;
            ptr->next = new ListNode(ans);
            ptr = ptr->next;
            
        }
        if(flag == 1)    //处理列表不等长且最后一次运算后有进位的情况
            ptr -> next = new ListNode(1);
        return index->next;    //因为初始化时第一个元素值为0，正真的答案在其后面的节点中，故直接返回从第二个元素开始的地址，工程上不建议这样做
    }
};